
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  studRollno     String         @id @db.VarChar(10)
  studFname      String         @db.VarChar(50)
  studMname      String?        @db.VarChar(50)
  studLname      String?        @db.VarChar(50)
  studEmail      String         @unique @db.VarChar(100)
  admYear        Int
  gender         Gender
  studPhone      String         @db.VarChar(15)
  roomType       RoomPreferenceInfo?
  delhiRegion    DelhiRegion?
  academicInfo   AcademicDetails?
  bankDetails    BankDetails?
  parentInfo     ParentDetails?
  address        StudentAddress?
  guardian       LocalGuardian?
  branch         Branch?
  allotments     Allotment[]    @relation("StudentAllotments")
  roomAsStudent1 Room?          @relation("RoomStudent1")
  roomAsStudent2 Room?          @relation("RoomStudent2")
  roomAsStudent3 Room?          @relation("RoomStudent3")
  applicationStatus ApplicationStatus @default(Draft)
  submittedAt     DateTime?
}

model RoomPreferenceInfo {
  rollNo        String @id @db.VarChar(10)
  roomPrf1      RoomType
  roomPrf2      RoomType
  roomPrf3      RoomType
  roomPrf4      RoomType
  bldGrp        BloodGroup
  fdChoice      FoodChoice
  admRegion     AdmissionRegion
  chronicProb   String?   @db.VarChar(255)
  stayingHostel YesNo
  profilePhoto  Bytes?
  signature     Bytes?
  student       Student @relation(fields: [rollNo], references: [studRollno])
}

model DelhiRegion {
  rollNo           String @id @db.VarChar(10)
  allotmentPriority String? @db.VarChar(50)
  distDtu          Int
  student          Student @relation(fields: [rollNo], references: [studRollno])
}

model AcademicDetails {
  rollNo        String @id @db.VarChar(10)
  cgpa          Float
  course        AcademicCourse
  backPaper     Int
  lastInstitute String? @db.VarChar(100)
  student       Student @relation(fields: [rollNo], references: [studRollno])
}

model BankDetails {
  rollNo        String @id @db.VarChar(10)
  bankName      String? @db.VarChar(100)
  bankHolderName String? @db.VarChar(100)
  accNo         String? @db.VarChar(20)
  bankIfsc      String? @db.VarChar(20)
  bankBranch    String? @db.VarChar(100)
  bankAddress   String? @db.VarChar(255)
  student       Student @relation(fields: [rollNo], references: [studRollno])
}

model ParentDetails {
  rollNo           String @id @db.VarChar(10)
  parentType       ParentType
  parentName       String @db.VarChar(100)
  parentMobno      String @db.VarChar(15)
  parentEmail      String @db.VarChar(100)
  parentOccupation String? @db.VarChar(100)
  parentDesignation String? @db.VarChar(100)
  pOfficeAddr      String? @db.VarChar(255)
  pOfficeNo        String? @db.VarChar(15)
  student          Student @relation(fields: [rollNo], references: [studRollno])
}

model StudentAddress {
  rollNo      String @id @db.VarChar(10)
  currAddress String @db.VarChar(255)
  isSameAddr  Boolean
  permAddress String @db.VarChar(255)
  student     Student @relation(fields: [rollNo], references: [studRollno])
}

model LocalGuardian {
  rollNo            String @id @db.VarChar(10)
  guardianName      String @db.VarChar(100)
  guardianPhno      String @db.VarChar(15)
  guardianEmail     String @db.VarChar(100)
  guardianOccupation String @db.VarChar(100)
  guardianAddr      String @db.VarChar(255)
  student           Student @relation(fields: [rollNo], references: [studRollno])
}

model Branch {
  rollNo  String @id @db.VarChar(10)
  course  BranchCourse
  student Student @relation(fields: [rollNo], references: [studRollno])
}

model Hostel {
  id           String      @id @db.VarChar(10)
  hostelName   String      @unique @db.VarChar(100)
  wardenName   String      @db.VarChar(100)
  asstWarden   String      @db.VarChar(100)
  genderType   HostelGender
  roomType     RoomType
  capacity     HostelCapacity?
  rooms        Room[]
  allotments   Allotment[]
}

model HostelCapacity {
  id           String  @id @db.VarChar(10)
  hostelId     String  @unique @db.VarChar(10)
  totalRooms   Int
  totalBeds    Int
  occupiedBeds Int @default(0)
  hostel       Hostel? @relation(fields: [hostelId], references: [id])
}

model Room {
  id          String      @id @db.VarChar(10)
  hostelId    String      @db.VarChar(10)
  roomNumber  String      @db.VarChar(10)
  student1Id  String?     @unique @db.VarChar(10)
  student2Id  String?     @unique @db.VarChar(10)
  student3Id  String?     @unique @db.VarChar(10)
  currentOccupancy Int @default(0)
  
  hostel      Hostel      @relation(fields: [hostelId], references: [id])
  student1    Student?    @relation("RoomStudent1", fields: [student1Id], references: [studRollno])
  student2    Student?    @relation("RoomStudent2", fields: [student2Id], references: [studRollno])
  student3    Student?    @relation("RoomStudent3", fields: [student3Id], references: [studRollno])
  allotments  Allotment[]
  
  @@unique([hostelId, roomNumber])
}

model Allotment {
  id          String      @id @db.VarChar(10)
  rollNo      String      @db.VarChar(10)
  hostelId    String      @db.VarChar(10)
  roomId      String      @db.VarChar(10)
  bedNumber   Int
  allotDate   DateTime    @default(now())
  status      AllotmentStatus @default(Active)
  
  student     Student     @relation(fields: [rollNo], references: [studRollno], name: "StudentAllotments")
  hostel      Hostel      @relation(fields: [hostelId], references: [id])
  room        Room        @relation(fields: [roomId], references: [id])
}

// Enums
enum StudStatus {
  Present
  Absent
  Leave
}

enum RoomType {
  AC_Triple_Seater       @map("AC: Triple Seater")
  NonAC_Single_Seater    @map("NON AC: Single Seater")
  NonAC_Double_Seater    @map("NON AC: Double Seater")
  NonAC_Triple_Seater    @map("NON AC: Triple Seater")
}

enum HostelGender {
  Girls
  Boys
}

enum RequestStatus {
  Submitted
  UnderProcess
  Approved
  Rejected
  Completed
}

enum Gender {
  Male
  Female
  Other
}

enum FoodChoice {
  Veg
  NonVeg
}

enum AdmissionRegion {
  Delhi
  OutsideDelhi
  DASA
}

enum YesNo {
  Yes
  No
}

enum ParentType {
  Father
  Mother
}

enum AcademicCourse {
  Btech
  Mtech
  PhD
  BDesign
  MDesign
  MSc
  MBA
  IMSC
}

enum BranchCourse {
  AE
  BT
  CE
  CH
  CO
  EC
  EE
  EL
  EN
  EP
  IT
  MC
  ME
  PE
  PS
  SE
}

enum BloodGroup {
  A_Positive  @map("A+")
  A_Negative  @map("A-")
  B_Positive  @map("B+")
  B_Negative  @map("B-")
  AB_Positive @map("AB+")
  AB_Negative @map("AB-")
  O_Positive  @map("O+")
  O_Negative  @map("O-")
}

enum AllotmentStatus {
  Active
  Provisional
  Cancelled
  Completed
}

enum ApplicationStatus {
  Draft
  Submitted
  UnderReview
  Approved
  Rejected
  Waitlisted
}




/*
// These models will be added later:

// feeRecord    FeeRecord?              // Will be added later
  // hostelAttendances HostelAttendance[] // Will be added later
  // messAttendances   MessAttendance[]   // Will be added later
  // surrender    Surrender?              // Will be added later, should be here?

model FeeRecord {
  // Will be implemented after initial setup
}

model HostelAttendance {
  // Will be implemented after initial setup
}

model MessAttendance {
  // Will be implemented after initial setup
}

model Surrender {
  // Will be implemented after initial setup
}


*/
